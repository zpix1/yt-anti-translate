name: Create Release with tag

# This will create a new relase tagged with the version specified in the 'app/manifest.json'
# This is skipped for PR titles that start with [CI-FIX] (case insensitive)
# if the source branch name is prepended with 'fix-' the release title will be 'v$VERSION - Fix'
# Else the release title will be with 'v$VERSION'
# CHANGELOG.md is used to populate the body of the release before any auto generated notes

on:
  pull_request_target:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures full git history
          fetch-tags: true # Ensures tags are fetched

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check PR title for [CI-FIX]
        id: check_ci_fix
        run: |
          bash <<'EOF'
          TITLE="${{ github.event.pull_request.title }}"
          if printf '%s\n' "$TITLE" | grep -iq '^\[ci-fix\]'; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version from manifest.json
        id: get_version
        run: |
          VERSION=$(jq -r .version app/manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Extract release notes
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          npm install dotenv@16.5.0

          echo -e "## Release Notes" > release_notes.txt
          echo -e "\n" >> release_notes.txt
          node .github/workflows/scripts/extractChangelogSection.js >> release_notes.txt

      - name: Append auto-generated release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          TAG="v$VERSION"
          echo -e "\n---\n" >> release_notes.txt

          gh api repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="$TAG" \
            -f target_commitish="${{ github.event.pull_request.merge_commit_sha }}" \
            --jq '.body' >> release_notes.txt

      - name: Create Draft GitHub Release
        if: steps.check_ci_fix.outputs.skip == 'false'
        env:
          VERSION: ${{ env.VERSION }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          updateOnlyUnreleased: true
          tag: ${{ steps.get_version.outputs.tag }}
          name: ${{ env.VERSION }}
          bodyFile: release_notes.txt
          draft: true

      - name: Manually trigger Firefox extension workflow
        if: steps.check_ci_fix.outputs.skip == 'false'
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-firefox-extension-publish

      - name: Manually trigger Chrome extension workflow
        if: steps.check_ci_fix.outputs.skip == 'false'
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-chromium-extension-publish

      - name: Save release info instead (CI-FIX skip)
        env:
          VERSION: ${{ env.VERSION }}
        if: steps.check_ci_fix.outputs.skip == 'true'
        run: |
          echo "Release has been skipped due to [CI-FIX] PR title." > skipped_release_info.txt
          echo "Tag: ${{ steps.get_version.outputs.tag }}" >> skipped_release_info.txt
          echo "Name: ${{ env.VERSION }}" >> skipped_release_info.txt
          echo -e "Body:\n$(cat release_notes.txt)" >> skipped_release_info.txt

      - name: Upload skipped release info
        if: steps.check_ci_fix.outputs.skip == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: skipped-release-info
          path: skipped_release_info.txt
